// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: board.sql

package orm

import (
	"context"
	"database/sql"
)

const readDinnerEntity = `-- name: ReadDinnerEntity :many
SELECT dinner_id, name, price
FROM dinner d, board_entity e
WHERE d.entity_id = e.entity_id
`

type ReadDinnerEntityRow struct {
	DinnerID int32
	Name     string
	Price    int32
}

func (q *Queries) ReadDinnerEntity(ctx context.Context) ([]ReadDinnerEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, readDinnerEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadDinnerEntityRow
	for rows.Next() {
		var i ReadDinnerEntityRow
		if err := rows.Scan(&i.DinnerID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readDinnersMenu = `-- name: ReadDinnersMenu :many
SELECT menu_id
FROM dinners_menu
WHERE dinner_id = (?)
`

func (q *Queries) ReadDinnersMenu(ctx context.Context, dinnerID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, readDinnersMenu, dinnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var menu_id int32
		if err := rows.Scan(&menu_id); err != nil {
			return nil, err
		}
		items = append(items, menu_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readMenuEntity = `-- name: ReadMenuEntity :many
SELECT menu_id, e.name, price, option1_name, option2_name, t.name as typename
FROM menu m, board_entity e, menu_type t
WHERE m.entity_id = e.entity_id
  AND t.id = m.type_id
`

type ReadMenuEntityRow struct {
	MenuID      int32
	Name        string
	Price       int32
	Option1Name sql.NullString
	Option2Name sql.NullString
	Typename    string
}

func (q *Queries) ReadMenuEntity(ctx context.Context) ([]ReadMenuEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, readMenuEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadMenuEntityRow
	for rows.Next() {
		var i ReadMenuEntityRow
		if err := rows.Scan(
			&i.MenuID,
			&i.Name,
			&i.Price,
			&i.Option1Name,
			&i.Option2Name,
			&i.Typename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readOption1Entity = `-- name: ReadOption1Entity :many
SELECT option_id, name, price
FROM menu_option1 o, board_entity e
WHERE o.entity_id = e.entity_id
  AND o.menu_id = (?)
`

type ReadOption1EntityRow struct {
	OptionID int32
	Name     string
	Price    int32
}

func (q *Queries) ReadOption1Entity(ctx context.Context, menuID int32) ([]ReadOption1EntityRow, error) {
	rows, err := q.db.QueryContext(ctx, readOption1Entity, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadOption1EntityRow
	for rows.Next() {
		var i ReadOption1EntityRow
		if err := rows.Scan(&i.OptionID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readOption2Entity = `-- name: ReadOption2Entity :many
SELECT option_id, name, price
FROM menu_option2 o, board_entity e
WHERE o.entity_id = e.entity_id
  AND o.menu_id = (?)
`

type ReadOption2EntityRow struct {
	OptionID int32
	Name     string
	Price    int32
}

func (q *Queries) ReadOption2Entity(ctx context.Context, menuID int32) ([]ReadOption2EntityRow, error) {
	rows, err := q.db.QueryContext(ctx, readOption2Entity, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadOption2EntityRow
	for rows.Next() {
		var i ReadOption2EntityRow
		if err := rows.Scan(&i.OptionID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readOrderState = `-- name: ReadOrderState :many
SELECT state_id, name
FROM state
`

func (q *Queries) ReadOrderState(ctx context.Context) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, readOrderState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(&i.StateID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readStyleEntity = `-- name: ReadStyleEntity :many
SELECT style_id, name, description, price
FROM style s, board_entity e
WHERE s.entity_id = e.entity_id
`

type ReadStyleEntityRow struct {
	StyleID     int32
	Name        string
	Description string
	Price       int32
}

func (q *Queries) ReadStyleEntity(ctx context.Context) ([]ReadStyleEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, readStyleEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadStyleEntityRow
	for rows.Next() {
		var i ReadStyleEntityRow
		if err := rows.Scan(
			&i.StyleID,
			&i.Name,
			&i.Description,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
