// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: create_order.sql

package orm

import (
	"context"
	"database/sql"
	"time"
)

const createOrderInfo = `-- name: CreateOrderInfo :execresult
INSERT INTO ` + "`" + `order` + "`" + ` (user_id, price, discount, reserve_at, created_at, name, address, phone, message)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateOrderInfoParams struct {
	UserID    int64
	Price     int32
	Discount  int32
	ReserveAt time.Time
	CreatedAt time.Time
	Name      string
	Address   string
	Phone     string
	Message   string
}

func (q *Queries) CreateOrderInfo(ctx context.Context, arg CreateOrderInfoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrderInfo,
		arg.UserID,
		arg.Price,
		arg.Discount,
		arg.ReserveAt,
		arg.CreatedAt,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Message,
	)
}

const createOrderState = `-- name: CreateOrderState :exec
INSERT INTO order_state (order_id)
VALUES (?)
`

func (q *Queries) CreateOrderState(ctx context.Context, orderID int64) error {
	_, err := q.db.ExecContext(ctx, createOrderState, orderID)
	return err
}

const createOrderedDinner = `-- name: CreateOrderedDinner :execresult
INSERT INTO ordered_dinner (order_id, style_id, amount)
VALUES (?, ?, ?)
`

type CreateOrderedDinnerParams struct {
	OrderID int64
	StyleID int32
	Amount  int32
}

func (q *Queries) CreateOrderedDinner(ctx context.Context, arg CreateOrderedDinnerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrderedDinner, arg.OrderID, arg.StyleID, arg.Amount)
}

const createOrderedMenu = `-- name: CreateOrderedMenu :exec
INSERT INTO ordered_menu (order_id, dinner_id, menutype_id, menu_id, option1_id, option2_id, count, price)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateOrderedMenuParams struct {
	OrderID    int64
	DinnerID   int64
	MenutypeID int32
	MenuID     int32
	Option1ID  sql.NullInt32
	Option2ID  sql.NullInt32
	Count      int32
	Price      sql.NullInt32
}

func (q *Queries) CreateOrderedMenu(ctx context.Context, arg CreateOrderedMenuParams) error {
	_, err := q.db.ExecContext(ctx, createOrderedMenu,
		arg.OrderID,
		arg.DinnerID,
		arg.MenutypeID,
		arg.MenuID,
		arg.Option1ID,
		arg.Option2ID,
		arg.Count,
		arg.Price,
	)
	return err
}
