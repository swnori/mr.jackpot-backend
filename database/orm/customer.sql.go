// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: customer.sql

package orm

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customer (customer_id, name, address, phone)
VALUES (?, ?, ?, ?)
`

type CreateCustomerParams struct {
	CustomerID int64
	Name       string
	Address    sql.NullString
	Phone      sql.NullString
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer,
		arg.CustomerID,
		arg.Name,
		arg.Address,
		arg.Phone,
	)
	return err
}

const createCustomerAuth = `-- name: CreateCustomerAuth :exec
INSERT INTO customer_auth (id, password, customer_id)
VALUES (?, ?, ?)
`

type CreateCustomerAuthParams struct {
	ID         string
	Password   string
	CustomerID int64
}

func (q *Queries) CreateCustomerAuth(ctx context.Context, arg CreateCustomerAuthParams) error {
	_, err := q.db.ExecContext(ctx, createCustomerAuth, arg.ID, arg.Password, arg.CustomerID)
	return err
}

const getAllCustomerInfo = `-- name: GetAllCustomerInfo :many
SELECT customer_id, name, address, phone, orders, rating, paid
FROM customer
WHERE status = TRUE
`

type GetAllCustomerInfoRow struct {
	CustomerID int64
	Name       string
	Address    sql.NullString
	Phone      sql.NullString
	Orders     int32
	Rating     int32
	Paid       int32
}

func (q *Queries) GetAllCustomerInfo(ctx context.Context) ([]GetAllCustomerInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCustomerInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCustomerInfoRow
	for rows.Next() {
		var i GetAllCustomerInfoRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Orders,
			&i.Rating,
			&i.Paid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerPassword = `-- name: GetCustomerPassword :one
SELECT password, customer_id
FROM customer_auth
WHERE id = (?)
`

type GetCustomerPasswordRow struct {
	Password   string
	CustomerID int64
}

func (q *Queries) GetCustomerPassword(ctx context.Context, id string) (GetCustomerPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerPassword, id)
	var i GetCustomerPasswordRow
	err := row.Scan(&i.Password, &i.CustomerID)
	return i, err
}

const getPersonalInfo = `-- name: GetPersonalInfo :one
SELECT customer_id, name, address, phone
FROM customer
WHERE customer_id = (?)
`

type GetPersonalInfoRow struct {
	CustomerID int64
	Name       string
	Address    sql.NullString
	Phone      sql.NullString
}

func (q *Queries) GetPersonalInfo(ctx context.Context, customerID int64) (GetPersonalInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getPersonalInfo, customerID)
	var i GetPersonalInfoRow
	err := row.Scan(
		&i.CustomerID,
		&i.Name,
		&i.Address,
		&i.Phone,
	)
	return i, err
}

const setCustomerQuit = `-- name: SetCustomerQuit :exec
UPDATE customer
SET status = FALSE
WHERE customer_id = (?)
`

func (q *Queries) SetCustomerQuit(ctx context.Context, customerID int64) error {
	_, err := q.db.ExecContext(ctx, setCustomerQuit, customerID)
	return err
}

const updatePersonalInfo = `-- name: UpdatePersonalInfo :exec
UPDATE customer
SET name = (?),
    phone = (?),
    address = (?)
WHERE customer_id = (?)
`

type UpdatePersonalInfoParams struct {
	Name       string
	Phone      sql.NullString
	Address    sql.NullString
	CustomerID int64
}

func (q *Queries) UpdatePersonalInfo(ctx context.Context, arg UpdatePersonalInfoParams) error {
	_, err := q.db.ExecContext(ctx, updatePersonalInfo,
		arg.Name,
		arg.Phone,
		arg.Address,
		arg.CustomerID,
	)
	return err
}
