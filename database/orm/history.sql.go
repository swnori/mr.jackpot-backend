// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: history.sql

package orm

import (
	"context"
	"time"
)

const getDinnerListHistory = `-- name: GetDinnerListHistory :many
SELECT name
FROM ordered_dinner, dinner, board_entity
WHERE order_id = (?)
AND ordered_dinner.dinner_id = dinner.dinner_id
AND dinner.entity_id = board_entity.entity_id
`

func (q *Queries) GetDinnerListHistory(ctx context.Context, orderID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getDinnerListHistory, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderHistory = `-- name: GetOrderHistory :many
SELECT price, discount, created_at, reserve_at, order_id
FROM ` + "`" + `order` + "`" + `
WHERE user_id = (?)
`

type GetOrderHistoryRow struct {
	Price     int32
	Discount  int32
	CreatedAt time.Time
	ReserveAt time.Time
	OrderID   int64
}

func (q *Queries) GetOrderHistory(ctx context.Context, userID int64) ([]GetOrderHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderHistory, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderHistoryRow
	for rows.Next() {
		var i GetOrderHistoryRow
		if err := rows.Scan(
			&i.Price,
			&i.Discount,
			&i.CreatedAt,
			&i.ReserveAt,
			&i.OrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
