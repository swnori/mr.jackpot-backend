// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: stock.sql

package orm

import (
	"context"
	"database/sql"
)

const addInventoryItem = `-- name: AddInventoryItem :execresult
INSERT INTO stock (name)
VALUES (?)
`

func (q *Queries) AddInventoryItem(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, addInventoryItem, name)
}

const deleteInventoryItem = `-- name: DeleteInventoryItem :exec
DELETE FROM stock
WHERE stock_id = (?)
`

func (q *Queries) DeleteInventoryItem(ctx context.Context, stockID int64) error {
	_, err := q.db.ExecContext(ctx, deleteInventoryItem, stockID)
	return err
}

const getAllInventoryList = `-- name: GetAllInventoryList :many
SELECT stock_id, name, count
FROM stock
`

func (q *Queries) GetAllInventoryList(ctx context.Context) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getAllInventoryList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(&i.StockID, &i.Name, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInventoryItem = `-- name: UpdateInventoryItem :exec
UPDATE stock
SET count = (?)
WHERE stock_id = (?)
`

type UpdateInventoryItemParams struct {
	Count   int32
	StockID int64
}

func (q *Queries) UpdateInventoryItem(ctx context.Context, arg UpdateInventoryItemParams) error {
	_, err := q.db.ExecContext(ctx, updateInventoryItem, arg.Count, arg.StockID)
	return err
}
