// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: stock.sql

package orm

import (
	"context"
	"database/sql"
)

const addStockItem = `-- name: AddStockItem :execresult
INSERT INTO
    stock (name)
VALUES
    (?)
`

func (q *Queries) AddStockItem(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, addStockItem, name)
}

const deleteStockItem = `-- name: DeleteStockItem :exec
DELETE FROM
    stock
WHERE
    stock_id = (?)
`

func (q *Queries) DeleteStockItem(ctx context.Context, stockID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStockItem, stockID)
	return err
}

const getAllStockList = `-- name: GetAllStockList :many
SELECT
    stock_id,
    name,
    count
FROM
    stock
`

func (q *Queries) GetAllStockList(ctx context.Context) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getAllStockList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(&i.StockID, &i.Name, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStockItem = `-- name: UpdateStockItem :exec
UPDATE
    stock
SET
    count = (?)
WHERE
    stock_id = (?)
`

type UpdateStockItemParams struct {
	Count   int32
	StockID int64
}

func (q *Queries) UpdateStockItem(ctx context.Context, arg UpdateStockItemParams) error {
	_, err := q.db.ExecContext(ctx, updateStockItem, arg.Count, arg.StockID)
	return err
}
