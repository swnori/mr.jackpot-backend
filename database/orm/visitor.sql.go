// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: visitor.sql

package orm

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO user
VALUES ()
`

func (q *Queries) CreateUser(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser)
}

const createVisitor = `-- name: CreateVisitor :exec
INSERT INTO visitor (visitor_id, identifier)
VALUES (?, ?)
`

type CreateVisitorParams struct {
	VisitorID  int64
	Identifier string
}

func (q *Queries) CreateVisitor(ctx context.Context, arg CreateVisitorParams) error {
	_, err := q.db.ExecContext(ctx, createVisitor, arg.VisitorID, arg.Identifier)
	return err
}

const getVisitorID = `-- name: GetVisitorID :one
SELECT visitor_id
FROM visitor
WHERE identifier = (?)
`

func (q *Queries) GetVisitorID(ctx context.Context, identifier string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getVisitorID, identifier)
	var visitor_id int64
	err := row.Scan(&visitor_id)
	return visitor_id, err
}
