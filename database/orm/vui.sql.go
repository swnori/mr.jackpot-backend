// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: vui.sql

package orm

import (
	"context"
)

const getDinnerId = `-- name: GetDinnerId :one
SELECT dinner_id
FROM dinner
WHERE entity_id = (?)
`

func (q *Queries) GetDinnerId(ctx context.Context, entityID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getDinnerId, entityID)
	var dinner_id int32
	err := row.Scan(&dinner_id)
	return dinner_id, err
}

const getMenuId = `-- name: GetMenuId :one
SELECT menu_id
FROM menu
WHERE entity_id = (?)
`

func (q *Queries) GetMenuId(ctx context.Context, entityID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getMenuId, entityID)
	var menu_id int32
	err := row.Scan(&menu_id)
	return menu_id, err
}

const getOption1Id = `-- name: GetOption1Id :one
SELECT option_id
FROM menu_option1
WHERE entity_id = (?)
`

func (q *Queries) GetOption1Id(ctx context.Context, entityID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOption1Id, entityID)
	var option_id int32
	err := row.Scan(&option_id)
	return option_id, err
}

const getOption2Id = `-- name: GetOption2Id :one
SELECT option_id
FROM menu_option2
WHERE entity_id = (?)
`

func (q *Queries) GetOption2Id(ctx context.Context, entityID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOption2Id, entityID)
	var option_id int32
	err := row.Scan(&option_id)
	return option_id, err
}

const readPreOrderChoice = `-- name: ReadPreOrderChoice :many
SELECT message, seq_id
FROM pre_order_choice
`

type ReadPreOrderChoiceRow struct {
	Message string
	SeqID   int32
}

func (q *Queries) ReadPreOrderChoice(ctx context.Context) ([]ReadPreOrderChoiceRow, error) {
	rows, err := q.db.QueryContext(ctx, readPreOrderChoice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadPreOrderChoiceRow
	for rows.Next() {
		var i ReadPreOrderChoiceRow
		if err := rows.Scan(&i.Message, &i.SeqID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readPreOrderChoiceNxtSeq = `-- name: ReadPreOrderChoiceNxtSeq :many
SELECT seq_id, nxt_id
FROM pre_order_choice_nxt_seq
`

func (q *Queries) ReadPreOrderChoiceNxtSeq(ctx context.Context) ([]PreOrderChoiceNxtSeq, error) {
	rows, err := q.db.QueryContext(ctx, readPreOrderChoiceNxtSeq)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreOrderChoiceNxtSeq
	for rows.Next() {
		var i PreOrderChoiceNxtSeq
		if err := rows.Scan(&i.SeqID, &i.NxtID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readProOrderChoice = `-- name: ReadProOrderChoice :many
SELECT seq_id, message, target
FROM pro_order_choice
`

type ReadProOrderChoiceRow struct {
	SeqID   int32
	Message string
	Target  string
}

func (q *Queries) ReadProOrderChoice(ctx context.Context) ([]ReadProOrderChoiceRow, error) {
	rows, err := q.db.QueryContext(ctx, readProOrderChoice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadProOrderChoiceRow
	for rows.Next() {
		var i ReadProOrderChoiceRow
		if err := rows.Scan(&i.SeqID, &i.Message, &i.Target); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readProOrderChoiceNxtSeq = `-- name: ReadProOrderChoiceNxtSeq :many
SELECT seq_id, nxt_id
FROM pro_order_choice_nxt_seq
`

func (q *Queries) ReadProOrderChoiceNxtSeq(ctx context.Context) ([]ProOrderChoiceNxtSeq, error) {
	rows, err := q.db.QueryContext(ctx, readProOrderChoiceNxtSeq)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProOrderChoiceNxtSeq
	for rows.Next() {
		var i ProOrderChoiceNxtSeq
		if err := rows.Scan(&i.SeqID, &i.NxtID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
