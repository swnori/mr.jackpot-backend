// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: vui.sql

package orm

import (
	"context"
)

const getAllEntityIdList = `-- name: GetAllEntityIdList :many
SELECT seq_id as target_id
FROM pro_order_choice
`

func (q *Queries) GetAllEntityIdList(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getAllEntityIdList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var target_id int32
		if err := rows.Scan(&target_id); err != nil {
			return nil, err
		}
		items = append(items, target_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDinnerEntity = `-- name: GetDinnerEntity :many
SELECT target_id, dinner_id, typename
FROM  dinner, entity_type, board_entity
WHERE dinner.entity_id = board_entity.entity_id
AND entity_type.type_id = board_entity.type_id
`

type GetDinnerEntityRow struct {
	TargetID int32
	DinnerID int32
	Typename string
}

func (q *Queries) GetDinnerEntity(ctx context.Context) ([]GetDinnerEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, getDinnerEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDinnerEntityRow
	for rows.Next() {
		var i GetDinnerEntityRow
		if err := rows.Scan(&i.TargetID, &i.DinnerID, &i.Typename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuEntity = `-- name: GetMenuEntity :many
SELECT target_id, menu_id, typename
FROM  menu, entity_type, board_entity
WHERE menu.entity_id = board_entity.entity_id
AND entity_type.type_id = board_entity.type_id
`

type GetMenuEntityRow struct {
	TargetID int32
	MenuID   int32
	Typename string
}

func (q *Queries) GetMenuEntity(ctx context.Context) ([]GetMenuEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, getMenuEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMenuEntityRow
	for rows.Next() {
		var i GetMenuEntityRow
		if err := rows.Scan(&i.TargetID, &i.MenuID, &i.Typename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOptionEntity = `-- name: GetOptionEntity :many
SELECT target_id, option_id, typename
FROM  menu_option1, entity_type, board_entity
WHERE menu_option1.entity_id = board_entity.entity_id
AND entity_type.type_id = board_entity.type_id
UNION
SELECT target_id, option_id, typename
FROM  menu_option2, entity_type, board_entity
WHERE menu_option2.entity_id = board_entity.entity_id
AND entity_type.type_id = board_entity.type_id
`

type GetOptionEntityRow struct {
	TargetID int32
	OptionID int32
	Typename string
}

func (q *Queries) GetOptionEntity(ctx context.Context) ([]GetOptionEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, getOptionEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOptionEntityRow
	for rows.Next() {
		var i GetOptionEntityRow
		if err := rows.Scan(&i.TargetID, &i.OptionID, &i.Typename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStyleEntity = `-- name: GetStyleEntity :many
SELECT target_id, style_id, typename
FROM  style, entity_type, board_entity
WHERE style.entity_id = board_entity.entity_id
AND entity_type.type_id = board_entity.type_id
`

type GetStyleEntityRow struct {
	TargetID int32
	StyleID  int32
	Typename string
}

func (q *Queries) GetStyleEntity(ctx context.Context) ([]GetStyleEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, getStyleEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStyleEntityRow
	for rows.Next() {
		var i GetStyleEntityRow
		if err := rows.Scan(&i.TargetID, &i.StyleID, &i.Typename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ping = `-- name: Ping :exec
INSERT INTO user
VALUES ()
`

func (q *Queries) Ping(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, ping)
	return err
}

const readPreOrderChoice = `-- name: ReadPreOrderChoice :many
SELECT message, seq_id
FROM pre_order_choice
`

type ReadPreOrderChoiceRow struct {
	Message string
	SeqID   int32
}

func (q *Queries) ReadPreOrderChoice(ctx context.Context) ([]ReadPreOrderChoiceRow, error) {
	rows, err := q.db.QueryContext(ctx, readPreOrderChoice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadPreOrderChoiceRow
	for rows.Next() {
		var i ReadPreOrderChoiceRow
		if err := rows.Scan(&i.Message, &i.SeqID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readPreOrderChoiceNxtSeq = `-- name: ReadPreOrderChoiceNxtSeq :many
SELECT seq_id, nxt_id
FROM pre_order_choice_nxt_seq
`

func (q *Queries) ReadPreOrderChoiceNxtSeq(ctx context.Context) ([]PreOrderChoiceNxtSeq, error) {
	rows, err := q.db.QueryContext(ctx, readPreOrderChoiceNxtSeq)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreOrderChoiceNxtSeq
	for rows.Next() {
		var i PreOrderChoiceNxtSeq
		if err := rows.Scan(&i.SeqID, &i.NxtID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readProOrderChoice = `-- name: ReadProOrderChoice :many
SELECT seq_id, message, target
FROM pro_order_choice
`

type ReadProOrderChoiceRow struct {
	SeqID   int32
	Message string
	Target  string
}

func (q *Queries) ReadProOrderChoice(ctx context.Context) ([]ReadProOrderChoiceRow, error) {
	rows, err := q.db.QueryContext(ctx, readProOrderChoice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadProOrderChoiceRow
	for rows.Next() {
		var i ReadProOrderChoiceRow
		if err := rows.Scan(&i.SeqID, &i.Message, &i.Target); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readProOrderChoiceNxtSeq = `-- name: ReadProOrderChoiceNxtSeq :many
SELECT seq_id, nxt_id
FROM pro_order_choice_nxt_seq
`

func (q *Queries) ReadProOrderChoiceNxtSeq(ctx context.Context) ([]ProOrderChoiceNxtSeq, error) {
	rows, err := q.db.QueryContext(ctx, readProOrderChoiceNxtSeq)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProOrderChoiceNxtSeq
	for rows.Next() {
		var i ProOrderChoiceNxtSeq
		if err := rows.Scan(&i.SeqID, &i.NxtID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
